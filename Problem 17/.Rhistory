sex = factor(sex),
medic = factor(ifelse(medic,"yes","no")),
hangover = factor(ifelse(hangover,"yes","no"))
) -> stats2b
stats2b
p1 = ggplot(stats2b,aes(transport,Pulse)) + geom_jitter(width=0.1)
p2 = ggplot(stats2b,aes(age,Pulse)) + geom_jitter(width=0.1)
p3 = ggplot(stats2b,aes(weight,Pulse)) + geom_point()
p4 = ggplot(stats2b,aes(height,Pulse)) + geom_point()
p5 = ggplot(stats2b,aes(sport,Pulse)) + geom_jitter(width=0.1)
p6 = ggplot(stats2b,aes(sex,Pulse)) + geom_jitter(width=0.1)
p7 = ggplot(stats2b,aes(coffee,Pulse)) + geom_jitter(width=0.1)
p8 = ggplot(stats2b,aes(medic,Pulse)) + geom_jitter(width=0.1)
p9 = ggplot(stats2b,aes(bmi,Pulse)) + geom_point()
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9)
lmod = lm(Pulse~transport+age+weight+height+sport+sex+coffee+medic+sleep+hangover+bmi, stats2b)
summary(lmod)
lmod
library(broom)
dmod = augment(lmod)
dmod
dmod[max(dmod$.resid),]
dmod[max(dmod$.resid),]
dmod[max(dmod$Pulse),]
max(dmod$Pulse)
plot(dmod$Pulse)
plot(dmod$.resid)
dmod %>% arrange(desc(.resid))
dmod %>% arrange(desc(.hat))
ggplot(dmod, aes(.resid, .fitted)) + geom_point()
plot(lmod,2)
termplot(lmod, partial.resid = TRUE, terms = 3)
lmod2 = lm(Pulse ~ Weight + Height + Sport + Medication + Hangover + BMI, stats2b)
lmod2 = lm(Pulse ~ weight + height + sport + medication + hangover + bmi, stats2b)
lmod2 = lm(Pulse ~ weight + height + sport + medic + hangover + bmi, stats2b)
summary(lmod)
summary(lmod2)
lmod2 = lm(Pulse ~ weight + height + sport + medic + hangover + bmi, stats2b)
summary(lmod)
summary(lmod2)
anove(lmod,lmod2)
lmod2 = lm(Pulse ~ weight + height + sport + medic + hangover + bmi, stats2b)
summary(lmod)
summary(lmod2)
anova(lmod,lmod2)
lmod2 = lm(Pulse ~ weight + height + sport + medic + hangover + bmi, stats2b)
summary(lmod)
summary(lmod2)
anova(lmod2,lmod)
c(glance(lmod)$adj.r.squared, glance(lmodr)$adj.r.squared)
c(glance(lmod)$adj.r.squared, glance(lmod2)$adj.r.squared)
ggplot(stats2b,aes(height,Pulse,color=sex)) + geom_point()
lmods = lm(Pulse ~ sex, stats2b)
summary(lmods)
lmodh = lm(Pulse ~ height, stats2b)
summary(lmodh)
lmodb = lm(Pulse ~ height + sex, stats2b)
summary(lmodb)
lmodr = lm(Pulse ~ weight + height + sport + medic + hangover + I(weight/(height^2)), stats2b)
lmodr = lm(Pulse ~ weight + height + sport + medic + hangover + bmi, stats2b)
plot(effect("weight",lmodr))
plot(effect("weight",lmodb))
install.packages("effects")
plot(effect("weight",lmodb))
plot(effect("weight",lmodr))
install.packages("effects")
plot(effect("weight",lmodr))
library(effects)
plot(effect("weight",lmodr))
lmodr = lm(Pulse ~ weight + height + sport + medic + hangover + I(weight/(height^2)), stats2b)
library(effects)
plot(effect("weight",lmodr))
plot(effect("height",lmodr))
plot(effect(c("height","weight"),lmodr))
library(knitr)
opts_chunk$set(comment=NA, warning=FALSE, fig.path="/tmp/Figs/")
data(hills,package="MASS")
head(hills)
hills
?hills
lm(time ~ climb + dist, hills)
naive = lm(time ~ climb + dist, hills)
plot(naive)
?hills
max(hills$time)
hills
?hills
lmod
naive = lm(time ~ climb + dist, hills)
library(knitr)
opts_chunk$set(comment=NA, warning=FALSE, fig.path="/tmp/Figs/")
data(hills,package="MASS")
head(hills)
naive = lm(time ~ climb + dist, hills)
summary(naive)
ggplot(hills, aes(time, climb)) + geom_point()
ggplot(hills, aes(time, dist)) + geom_point()
cor(hills)
cor(hills %>% select(dist, climb))
lmod = lm(time ~ dist + climb, hills)
summary(lmod)
lmod_no_intercept = lm(time ~ -1 + dist + climb, hills)
summary(lmod_no_intercept)
lmod_no_intercept = lm(time ~ -1 + dist + climb, hills)
summary(lmod_no_intercept)
anova(lmod, lmod_no_intercept)
lmod_no_intercept = lm(time ~ -1 + dist + climb, hills)
summary(lmod_no_intercept)
anova(lmod_no_intercept, lmod)
lmod_no_intercept = lm(time ~ -1 + dist + climb, hills)
anova(lmod_no_intercept, lmod)
?hills
hills
plot(lmod)
plot(lmod)
termplot(lmod, partial.resid = TRUE)
plot(lmod)
termplot(lmod, partial.resid = TRUE, rug = TRUE)
plot(lmod)
termplot(lmod, partial.resid = TRUE)
plot(lmod)
termplot(lmod, partial.resid = TRUE)
termplot(hills.lm, partial.resid = TRUE, smooth = panel.smooth,
terms = "log(dist)", main = "Original")
plot(lmod)
termplot(lmod, partial.resid = TRUE)
hills.lm <- lm(log(time) ~ log(climb)+log(dist), data = MASS::hills)
termplot(hills.lm, partial.resid = TRUE, smooth = panel.smooth,
terms = "log(dist)", main = "Original")
termplot(hills.lm, transform.x = TRUE,
partial.resid = TRUE, smooth = panel.smooth,
terms = "log(dist)", main = "Transformed")
plot(lmod)
termplot(lmod, partial.resid = TRUE)
View(hills)
ggplot(hills, aes(time, climb)) + geom_point() + geom_smooth(method="lm",se = FALSE)
ggplot(hills, aes(time, dist)) + geom_point() + geom_smooth(method="lm",se = FALSE)
plot(lmod,5)
termplot(lmod, partial.resid = TRUE)
plot(lmod,4)
termplot(lmod, partial.resid = TRUE)
plot(lmod)
termplot(lmod, partial.resid = TRUE)
plot(lmod,4)
termplot(lmod, partial.resid = TRUE)
plot(lmod)
termplot(lmod, partial.resid = TRUE)
lmod$terms
lmod$rank
lmod$coefficients
nrow(lmod$coefficients)
ncol(lmod$coefficients)
ncols(lmod$coefficients)
class(lmod$coefficients)
lmod$coefficients
length(lmod$coefficients)
tail(sort(abs(rstudent(lmod))))
qt(0.05/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1)
tail(sort(abs(rstudent(lmod))))
abs(qt(0.05/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1))
tail(sort(abs(rstudent(lmod))))
abs(qt(0.005/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1))
tail(sort(abs(rstudent(lmod))))
abs(qt(0.000005/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1))
tail(sort(abs(rstudent(lmod))))
abs(qt(0.00000005/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1))
tail(sort(abs(rstudent(lmod))))
abs(qt(0.0000005/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1))
1-0.0000005
tail(sort(abs(rstudent(lmod))))
abs(qt(0.05/(nrow(hills)*2), nrow(hills) - length(lmod$coefficients) - 1))
x = lmod$residuals[1:(length(lmod$residuals)-1)]
y = lmod$residuals[2:length(lmod$residuals)]
plot(x,y)
x = lmod$residuals[1:(length(lmod$residuals)-1)]
y = lmod$residuals[2:length(lmod$residuals)]
ggplot(x,y)
x = lmod$residuals[1:(length(lmod$residuals)-1)]
y = lmod$residuals[2:length(lmod$residuals)]
ggplot(aes(x,y))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual, next.residual)
ggplot(aes(x,y))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual, next.residual)
ggplot(adjancent.data. aes(x,y))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual, next.residual)
ggplot(adjancent.data,aes(x,y))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual, next.residual)
ggplot(adjacent.data,aes(x,y))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual, next.residual)
ggplot(adjacent.data)
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual, next.residual)
ggplot(adjacent.data, aes(residual, next.residual))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual = residual, next.residual = next.residual)
ggplot(adjacent.data, aes(residual, next.residual))
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual = residual, next.residual = next.residual)
ggplot(adjacent.data, aes(residual, next.residual))
plot(residual, next.residual)
residual = lmod$residuals[1:(length(lmod$residuals)-1)]
next.residual = lmod$residuals[2:length(lmod$residuals)]
adjacent.data = data.frame(residual = residual, next.residual = next.residual)
ggplot(adjacent.data, aes(residual, next.residual)) + geom_point()
plot(residual, next.residual)
adjacent.data = data.frame(residual = lmod$residuals[1:(length(lmod$residuals)-1)], next.residual = lmod$residuals[2:length(lmod$residuals)])
ggplot(adjacent.data, aes(residual, next.residual)) + geom_point()
ggplot(data.frame(residual = lmod$residuals[1:(length(lmod$residuals)-1)], next.residual = lmod$residuals[2:length(lmod$residuals)]), aes(residual, next.residual)) + geom_point()
install.packages('tinytex')
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(grid)
library(dplyr)
library(effects)
ggplot(BBT, aes(Episode, Rating)) + geom_point() + facet_wrap(facets = vars(Season)) + geom_smooth(method = "lm")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(grid)
library(dplyr)
library(effects)
BBT = read_csv("BigBangTheory.csv", col_types = list(AirDate = col_date(format = "%m/%d/%Y")))
BBT$Season = factor(as.integer(substr(BBT$ID, 1, regexpr("_", BBT$ID)-1)), levels = 1:10)
BBT$Episode = factor(substr(BBT$ID, regexpr("_", BBT$ID)+1, nchar(BBT$ID)), levels = 1:24)
ggplot(BBT, aes(Season, Rating)) + geom_boxplot() + geom_jitter(alpha = 0.5)
ggplot(BBT, aes(Leonard, Rating)) + geom_point()
ggplot(BBT, aes(Director, Rating)) + geom_boxplot()
ggplot(BBT, aes(AirDate, Rating)) + geom_point()
ggplot(BBT, aes(Episode, Rating)) + geom_point() + facet_wrap(facets = vars(Season)) + geom_smooth(method = "lm")
ggplot(BBT, aes(AirDate, Rating)) + geom_point() +
annotation_custom(textGrob("Amy", gp = gpar(col = "red")),
xmin=as.Date("2010-05-24"), xmax=as.Date("2010-05-24"),ymin=6.9, ymax=6.9) +
annotation_custom(segmentsGrob(gp = gpar(col = "red", lwd = 8)),
xmin=as.Date("2010-05-24"), xmax=as.Date("2010-05-24"),ymin=6.75, ymax=6.75) +
annotation_custom(textGrob("Bernadette", gp = gpar(col = "red")),
xmin=as.Date("2009-10-19"), xmax=as.Date("2009-10-19"),ymin=7.0, ymax=7.0) +
annotation_custom(segmentsGrob(gp = gpar(col = "red", lwd = 8)),
xmin=as.Date("2009-10-19"), xmax=as.Date("2009-10-19"),ymin=6.75, ymax=6.75)
ggplot(BBT %>% filter(Season == 3), aes(Episode, Rating)) + geom_point() +
annotation_custom(textGrob("Bernadette", gp = gpar(col = "red")),
xmin=5, xmax=5,ymin=7.75, ymax=7.75) +
annotation_custom(segmentsGrob(gp = gpar(col = "red", lwd = 8)),
xmin=5, xmax=5,ymin=7.65, ymax=7.65) + labs(title = "Season 3")
ggplot(BBT, aes(Writer, Rating)) + geom_point() + ggtitle("A mess")
BBT$Chuck = factor(ifelse(BBT$Writer == "Chuck Lorre", "Only Chuck", ifelse(grepl("Chuck Lorre", BBT$Writer), "Chuck and Another", "No Chuck")), levels = c("Only Chuck", "Chuck and Another", "No Chuck"))
ggplot(BBT, aes(Chuck, Rating)) + geom_boxplot() + geom_jitter(alpha = 0.5) + xlab("")
BBT$ContainsChuck = factor(ifelse(BBT$Chuck == "No Chuck", 0, 1))
lmod = lm(Rating ~ 1, BBT)
lmod2 = lm(Rating ~ ContainsChuck, BBT)
lmod3 = lm(Rating ~ Chuck, BBT)
anova(lmod, lmod2)
anova(lmod,lmod3)
BBT$Episode = as.numeric(BBT$Episode)
BBT$AirDate = as.numeric(BBT$AirDate) #R seems to do this for us
lmod = lm(Rating ~ AirDate + Episode + Director + Leonard + Sheldon + Penny + Howard + Raj, BBT)
plot(lmod)
summary(lmod)
#ggplot(BBT, aes(AirDate, Rating)) + geom_point() + geom_smooth(method = "lm", se = F) - DO NOT USE
ggplot(data.frame(residual = lmod$residuals[1:(length(lmod$residuals)-1)], next.residual = lmod$residuals[2:length(lmod$residuals)]), aes(residual, next.residual)) + geom_point()
BBT[194,]
BBT[231,]
tail(sort(abs(rstudent(lmod))))
abs(qt(0.05/(nrow(BBT)*2),nrow(BBT)-length(lmod$coefficients)-1))
BBT_lines = BBT %>% select(Leonard, Sheldon, Penny, Howard, Leslie, Bernadette, Amy, Stuart, Emily, Mary, Zack, Bert, Janine, Wil, Raj)
cor_table = cor(BBT_lines)
cor_table[nrow(cor_table),-ncol(cor_table)]
BBT$Words = rowSums(BBT_lines)
lmod_words = lm(Rating ~ Words, BBT)
summary(lmod_words)
ggplot(BBT, aes(Words, Rating)) + geom_point() + geom_smooth(method = "lm", formula = y ~ x, se = F)
lmod_words2 = lm(Rating ~ AirDate + Episode + Director + Words, BBT)
summary(lmod_words2)
set.seed(123)
sample = sample.int(nrow(BBT), round(0.8*nrow(BBT)))
training.data = BBT[sample,]
test.data = BBT[-sample,]
BBT$Training = ifelse(1:nrow(BBT) %in% sample, T, F)
ggplot(BBT, aes(AirDate, Rating)) + geom_point(aes(colour = Training))
lmod.proper = lm(Rating ~ AirDate, training.data)
summary(lmod.proper)
plot(lmod.proper)
ggplot(training.data, aes(AirDate, Rating)) + geom_point() + geom_smooth(method = "lm") #Think this is the same as an effect plot
ggplot(BBT, aes(Episode, Rating)) + geom_point() + facet_wrap(facets = vars(Season)) + geom_smooth(model = BBT, method = "lm")
weights = c(6,6,4,4,4,4,2.5,2.5,2.5,2.5,2,2,1.25,1.25,1.25,1.25,0.5,0.5,0.5,0.5)
for (i in 1:length(weights)) {
to.test = t(combn(weights,i))
}
can.halve = function(vec) {
i = 1
while (i < length(vec)) {
if (sum(vec[1:i]) == sum(vec[(i+1):length(vec)])) {
return (TRUE)
}
i = i + 1
}
return (FALSE)
}
vec = c(1,2,3)
can.halve(vec)
vec = c(1,2,3,4)
can.halve(vec)
combn(1:3)
combn(1:3,3)
t(combn(1:3,3))
length(weights)
install.packages("multicool")
install.packages("multicool")
install.packages("multicool")
install.packages("multicool")
library("multicool", lib.loc="~/R/win-library/3.5")
res <- allPerm(initMC(c(rep(0,10),rep(1,10))))
Bell(6)
library(multicool)
detach("package:multicool", unload=TRUE)
library("multicool", lib.loc="~/R/win-library/3.5")
library(ggplot)
library(readxl)
Fuzzy_Match_pm25_and_C19_deaths_v0_5 <- read_excel("C:\\Users\\User\\Desktop\\Work\\Fuzzy Match pm25 and C19 deaths v0.5.xlsx")
View(Fuzzy_Match_pm25_and_C19_deaths_v0_5)
Master.Data = Fuzzy_Match_pm25_and_C19_deaths_v0_5
l.mod = lm(Dath Rate ~ PM25 + Age)
l.mod = lm(Death Rate ~ PM25 + Age)
l.mod = lm(Death Rate ~ PM25 + Age, Master.Data)
l.mod = lm(Death Rate ~ PM25 + Age, data = Master.Data)
l.mod = lm(Death_Rate ~ PM25 + Age, data = Master.Data)
library(readxl)
Fuzzy_Match_pm25_and_C19_deaths_v0_5 <- read_excel("C:/Users/User/Desktop/Work/Fuzzy Match pm25 and C19 deaths v0.5.xlsx")
View(Fuzzy_Match_pm25_and_C19_deaths_v0_5)
l.mod = lm('Death Rate' ~ PM25 + Age, data = Master.Data)
Master.Data$PM25
Master.Data$Age
l.mod = lm('Death Rate' ~ PM25 + Age, data = Master.Data)
l.mod = lm(formula = 'Death Rate' ~ PM25 + Age, data = Master.Data)
Master.Data = na.rm(Master.Data)
Master.Data2 = na.omit(Master.Data)
l.mod = lm(formula = 'Death Rate' ~ PM25 + Age, data = Master.Data2)
l.mod = lm(formula = 'Death Rate'~PM25 + Age, data = Master.Data2)
names(Master.Data2)
l.mod = lm(formula = 'Death Rate'~'PM25' + 'Age', data = Master.Data2)
class(Master.Data2)
Master.Data2 = as.data.frame(Master.Data2)
l.mod = lm(formula = 'Death Rate'~'PM25' + 'Age', data = Master.Data2)
l.mod = lm(formula = 'Death Rate'~PM25 + Age, data = Master.Data2)
l.mod = lm(formula = Death Rate~PM25 + Age, data = Master.Data2)
l.mod = lm(Death Rate~PM25 + Age, data = Master.Data2)
l.mod = lm(formula = `Death Rate` ~ PM25 + Age, data = Master.Data2)
length(Master.Data2)
Master.Data2
Master.Data = Fuzzy_Match_pm25_and_C19_deaths_v0_5
Master.Data = as.data.frame(Master.Data)
l.mod = lm(formula = `Death Rate` ~ PM25 + Age, data = Master.Data)
l.mod
plot(l.mod)
summary(l.mod)
length(Master.Data)
nrow(Master.Data)
primes = generate_primes(0,1000000)
source('~/R/Tan(prime)/Script.R')
plot(primes, t_primes)
library('primes')
primes = generate_primes(0,1000000)
t_primes = tan(primes)
print(any(t_primes>primes))
plot(primes, t_primes)
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
cat("Total was: ", running_total, " letters ...", "\n")
words.letters = c("ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE")
words.letters2 = c("ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE",
"TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFETEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN")
words.tens = c("NULL", "TWENTY", "THIRTY", "FOURTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY")
#Writes numbers up to 1,000
write.num = function(x) {
if (x > 999) {
cat("ONE THOUSAND", "\n");
} else if (x > 99) {
num = as.integer(substr(toString(x), 1, 1))
cat(words.letters[num], " HUNDRED ")
if (!(x %% 100 == 0)) {
cat("AND ")
}
if (x %% 100 > 19) {
cat(words.tens[as.integer(substr(toString(x), 2, 2))], " ")
cat(words.letters[as.integer(substr(toString(x), 3, 3))], "\n")
} else {
cat(words.letters2[as.integer(substr(toString(x), 2, 3))], "\n")
}
} else if (x > 19) {
cat(words.tens[as.integer(substr(toString(x), 1, 1))], " ")
cat(words.letters[as.integer(substr(toString(x), 2, 2))], "\n")
} else {
cat(words.letters2[x], "\n")
}
}
#Writes numbers up to 1,000 and counts the letters
write.num.total = function(x, running_total) {
if (x > 999) {
#cat("ONE THOUSAND", "\n");
running_total = running_total + 11
} else if (x > 99) {
num = as.integer(substr(toString(x), 1, 1))
#cat(words.letters[num], " HUNDRED ")
running_total = running_total + nchar(words.letters[as.integer(substr(toString(x), 1,1))])
if (!(x %% 100 == 0)) {
#cat("AND ")
running_total = running_total + 3
}
if (x %% 100 > 19) {
#cat(words.tens[as.integer(substr(toString(x), 2, 2))], " ")
running_total = running_total + nchar(words.tens[as.integer(substr(toString(x), 2, 2))])
#cat(words.letters[as.integer(substr(toString(x), 3, 3))], "\n")
running_total = running_total + nchar(words.letters[as.integer(substr(toString(x), 3, 3))])
} else {
#cat(words.letters2[as.integer(substr(toString(x), 2, 3))], "\n")
running_total = running_total + nchar(words.letters2[as.integer(substr(toString(x), 2, 3))])
}
} else if (x > 19) {
#cat(words.tens[as.integer(substr(toString(x), 1, 1))], " ")
running_total = running_total + nchar(words.tens[as.integer(substr(toString(x), 1, 1))])
#cat(nchar(words.tens[as.integer(substr(toString(x), 1, 1))]), "\n")
#cat(words.letters[as.integer(substr(toString(x), 2, 2))], "\n")
running_total = running_total + ifelse(identical(numeric(0), nchar(words.letters[as.integer(substr(toString(x), 2, 2))])), 0,  nchar(words.letters[as.integer(substr(toString(x), 2, 2))]))
#cat(nchar(words.letters[as.integer(substr(toString(x), 2, 2))]), "\n")
} else {
#cat(words.letters2[x], "\n")
running_total = running_total + nchar(words.letters2[x])
}
return (running_total)
}
for (i in 1:1000) {
write.num(i)
}
running_total = 0
# for (i in 1:1000) {
#
#   running_total = write.num.total(i, running_total)
#
#   cat(i, ": ", running_total, "\n")
#
# }
cat("Total was: ", running_total, " letters ...", "\n")
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
toSring(100)
source('~/Project Euler/Problem 17/Problem 17.R')
toString(100)
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
setwd("~/Project Euler/Problem 17")
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
setwd("~/Project Euler/Problem 17")
wd()
list()
list.files()
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
num.to.string(1)
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
file.info
file.info(paste0(getwd(), "/", "test.csv"))
paste0(getwd())
file.info(getwd())
source('~/Project Euler/Problem 17/Problem 17.R')
file.create("test2.txt")
file.create(paste0(getwd(), "/", "test2.txt"))
source('~/Project Euler/Problem 17/Problem 17.R')
read.table("test.txt")
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
source('~/Project Euler/Problem 17/Problem 17.R')
